name: Frontend Vue.js CI/CD Pipeline Docker Image

on:
  push:
    branches: [ dev/actions ]
  workflow_dispatch:
    # Manual trigger

# Environment variables
env:
  DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
  DOCKER_HUB_ACCESS_TOKEN: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
  IMAGE_NAME: frontend-test
  IMAGE_TAG: ${{ steps.set-tag.outputs.image_tag }}
  DEV_DEPLOY_SERVER: ${{ secrets.DEV_DEPLOY_SERVER }}
  DEV_DEPLOY_USER: ${{ secrets.DEV_DEPLOY_USER }}
  DEV_DEPLOY_PATH: ${{ secrets.DEV_DEPLOY_PATH }}
  DEV_SSH_PRIVATE_KEY: ${{ secrets.DEV_SSH_PRIVATE_KEY }}
  DEV_DEPLOY_PORT: ${{ secrets.DEV_DEPLOY_PORT || '22' }}

jobs:
  build-and-dockerize:
    name: Build and Test
    runs-on: ubuntu-22.04
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Node.js
      run: |
        echo "Versi nodejs:"
        node -v || echo "Node.js isnt installed"

        # Install NVM (buat milih versi nodejs)
        curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
        export NVM_DIR="$HOME/.nvm"
        [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # Load NVM
        
        # Install and use Node.js 22 (sesuai versi vue sekarang)
        nvm install 22
        nvm use 22

        # cek versi lagi
        echo "Installed Node.js version:"
        node --version
        echo "Installed npm version:"
        npm --version
    
        # Set up npm cache manually
        npm config set cache ~/.npm-cache --global

    - name: Install dependencies
      run: npm ci

    - name: Build
      run: npm run build

    - name: Login to Docker Hub
      run: |
        echo "${{ env.DOCKER_HUB_ACCESS_TOKEN }}" | docker login -u ${{ env.DOCKER_HUB_USERNAME }} --password-stdin
        echo "login berhasil: ${{ env.DOCKER_HUB_USERNAME }}"

    # atur tag name sesuai branch dan sha (tidak boleh ada slash)
    - name: Set Docker image tag
      id: set-tag
      run: |
        BRANCH_NAME="${GITHUB_REF_NAME//\//-}"
        echo "image_tag=${BRANCH_NAME}-${GITHUB_SHA}" >> $GITHUB_OUTPUT

    - name: Build Docker image
      run: |
        # build image (dengan cache)
        docker build -t ${{ env.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} .

    - name: Push Docker image to Docker Hub
      run: |
        docker push ${{ env.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

  deploy:
    name: Deploy
    runs-on: ubuntu-22.04
    needs: build-and-dockerize
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up SSH
      run: |
        # Create SSH directory
        mkdir -p ~/.ssh
        # Save the private key from GitHub secrets
        echo "${{ env.DEV_SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
        # Set proper permissions (SSH requires these permissions)
        chmod 600 ~/.ssh/deploy_key
        # Add server to known hosts to prevent first-time connection prompts
        ssh-keyscan -p ${{ env.DEV_DEPLOY_PORT }} -H ${{ env.DEV_DEPLOY_SERVER }} >> ~/.ssh/known_hosts
      
    - name: Deploy to Server
      run: |
        CONTAINER_NAME=frontend-test-container
        
        ssh -i ~/.ssh/deploy_key -p ${{ env.DEV_DEPLOY_PORT }} ${{ env.DEV_DEPLOY_USER }}@${{ env.DEV_DEPLOY_SERVER }} << EOF
          set -e
          
          # pull image
          echo "Pulling Docker image..."
          docker pull ${{ env.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          
          # stop and remove any existing container
          echo "Stopping existing container if running..."
          docker stop $CONTAINER_NAME 2>/dev/null || true
          docker rm $CONTAINER_NAME 2>/dev/null || true
          
          # run container
          echo "Starting new container..."
          docker run -d \
            --name $CONTAINER_NAME \
            -p 8085:80 \
            --restart unless-stopped \
            ${{ env.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          
          # Verify deployment
          echo "Verifying deployment..."
          docker ps | grep $CONTAINER_NAME
          
          # Clean up old images to save space
          echo "Cleaning up old images..."
          docker system prune -af --volumes
        EOF
