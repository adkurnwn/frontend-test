name: Frontend Vue.js CI/CD Pipeline Docker Image

on:
  push:
    branches: [ dev/actions ]
  workflow_dispatch:
    # Manual trigger

# Environment variables
env:
  DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
  DOCKER_HUB_ACCESS_TOKEN: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
  IMAGE_NAME: frontend-test
  IMAGE_TAG: dev-actions-${{ github.sha }}
  DEV_DEPLOY_SERVER: ${{ secrets.DEV_DEPLOY_SERVER }}
  DEV_DEPLOY_USER: ${{ secrets.DEV_DEPLOY_USER }}
  DEV_DEPLOY_PATH: ${{ secrets.DEV_DEPLOY_PATH }}
  DEV_SSH_PRIVATE_KEY: ${{ secrets.DEV_SSH_PRIVATE_KEY }}
  DEV_DEPLOY_PORT: ${{ secrets.DEV_DEPLOY_PORT }}

jobs:
  build-and-dockerize:
    name: Build and Test
    runs-on: ubuntu-22.04
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Build Docker image
      run: |
        # build image (dengan cache)
        docker build -t ${{ env.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} .

    - name: Login to Docker Hub
      run: |
        echo "${{ env.DOCKER_HUB_ACCESS_TOKEN }}" | docker login -u ${{ env.DOCKER_HUB_USERNAME }} --password-stdin
        echo "login berhasil: ${{ env.DOCKER_HUB_USERNAME }}"

    - name: Push Docker image to Docker Hub
      run: |
        docker push ${{ env.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

  deploy:
    name: Deploy
    runs-on: ubuntu-22.04
    needs: build-and-dockerize
    env:
      CONTAINER_NAME: frontend-test-container
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up SSH
      run: |
        # Create SSH directory
        mkdir -p ~/.ssh
        # Save the private key from GitHub secrets
        echo "${{ env.DEV_SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
        # Set proper permissions (SSH requires these permissions)
        chmod 600 ~/.ssh/deploy_key
        # Add server to known hosts to prevent first-time connection prompts
        ssh-keyscan -p ${{ env.DEV_DEPLOY_PORT }} -H ${{ env.DEV_DEPLOY_SERVER }} >> ~/.ssh/known_hosts
      
    - name: Deploy to Server
      run: |
        ssh -i ~/.ssh/deploy_key -p ${{ env.DEV_DEPLOY_PORT }} ${{ env.DEV_DEPLOY_USER }}@${{ env.DEV_DEPLOY_SERVER }} << EOF
          set -e
          
          # pull image
          echo "Pulling Docker image..."
          docker pull ${{ env.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          
          # stop and remove any existing container
          echo "Stopping existing container if running..."
          docker stop $CONTAINER_NAME 2>/dev/null || true
          docker rm $CONTAINER_NAME 2>/dev/null || true
          
          # run container
          echo "Starting new container..."
          docker run -d \
            --name $CONTAINER_NAME \
            -p 8085:80 \
            --restart unless-stopped \
            ${{ env.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          
          # Verify deployment
          echo "Verifying deployment..."
          docker ps | grep $CONTAINER_NAME
          
          # Clean up old images to save space
          echo "Cleaning up old images..."
          docker system prune -af --volumes
        EOF
