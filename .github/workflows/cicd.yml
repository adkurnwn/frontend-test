name: Frontend Vue.js Build and Deploy

on:
  push:
    branches: [ dev/actions ]
  workflow_dispatch:
    # Manual trigger

# Environment variables for deployment
env:
  DEV_DEPLOY_SERVER: ${{ secrets.DEV_DEPLOY_SERVER }}
  DEV_DEPLOY_USER: ${{ secrets.DEV_DEPLOY_USER }}
  DEV_DEPLOY_PATH: ${{ secrets.DEV_DEPLOY_PATH }}
  DEV_SSH_PRIVATE_KEY: ${{ secrets.DEV_SSH_PRIVATE_KEY }}
  DEV_DEPLOY_PORT: ${{ secrets.DEV_DEPLOY_PORT }}

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-22.04
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Node.js
      run: |
        echo "Versi nodejs:"
        node -v || echo "Node.js isnt installed"

        # Install NVM (buat milih versi nodejs)
        curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
        export NVM_DIR="$HOME/.nvm"
        [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # Load NVM
        
        # Install and use Node.js 22 (sesuai versi vue sekarang)
        nvm install 22
        nvm use 22

        # cek versi lagi
        echo "Installed Node.js version:"
        node --version
        echo "Installed npm version:"
        npm --version
    
        # Set up npm cache manually
        npm config set cache ~/.npm-cache --global

    - name: Install dependencies
      run: npm ci

    - name: Build
      run: npm run build

    - name: Upload build artifacts
      run: |
        # buat archive folder dist
        echo "Creating artifact archive..."
        mkdir -p $GITHUB_WORKSPACE/artifacts
        tar -czf $GITHUB_WORKSPACE/artifacts/dist.tar.gz -C dist .
    
    - name: Set up SSH key
      run: |
        # Create SSH directory
        mkdir -p ~/.ssh
        # Save the private key from GitHub secrets
        echo "${{ env.DEV_SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
        # Set proper permissions (SSH requires these permissions)
        chmod 600 ~/.ssh/deploy_key
        # Add server to known hosts to prevent first-time connection prompts
        ssh-keyscan -p ${{ env.DEV_DEPLOY_PORT }} -H ${{ env.DEV_DEPLOY_SERVER }} >> ~/.ssh/known_hosts
      
    # Deploy the built files to the server
    - name: Deploy to web server
      run: |
        echo "Starting deployment to ${{ env.DEV_DEPLOY_SERVER }}..."
        
        # Create the destination directory if it doesn't exist
        ssh -i ~/.ssh/deploy_key -p ${{ env.DEV_DEPLOY_PORT }} ${{ env.DEV_DEPLOY_USER }}@${{ env.DEV_DEPLOY_SERVER }} "mkdir -p ${{ env.DEV_DEPLOY_PATH }}"

        # Copy the existing tar file to the server
        scp -i ~/.ssh/deploy_key -P ${{ env.DEV_DEPLOY_PORT }} $GITHUB_WORKSPACE/artifacts/dist.tar.gz ${{ env.DEV_DEPLOY_USER }}@${{ env.DEV_DEPLOY_SERVER }}:${{ env.DEV_DEPLOY_PATH }}/dist.tar.gz
        
        # The rest stays the same
        ssh -i ~/.ssh/deploy_key -p ${{ env.DEV_DEPLOY_PORT }} ${{ env.DEV_DEPLOY_USER }}@${{ env.DEV_DEPLOY_SERVER }} "cd ${{ env.DEV_DEPLOY_PATH }} && rm -rf *.html *.js *.css assets && tar -xzf dist.tar.gz && rm dist.tar.gz"
        
        echo "Deployment completed successfully!"